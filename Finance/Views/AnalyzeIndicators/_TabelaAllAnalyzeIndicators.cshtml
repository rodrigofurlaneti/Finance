@model IEnumerable<Indicators>

<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col" class="text-center">Código</th>
            <th scope="col" class="text-center">Atual</th>
            <th scope="col" class="text-center">Justo</th>
            <th scope="col" class="text-center">DY</th>
            <th scope="col" class="text-center">P/L</th>
            <th scope="col" class="text-center">LPA</th>
            <th scope="col" class="text-center">VPA</th>
            <th scope="col" class="text-center">P/VP</th>
            <th scope="col" class="text-center">Ev/Ebitda</th>
            <th scope="col" class="text-center">Dl/Ebitda</th>
            <th scope="col" class="text-center">Carg Lucro</th>
            <th scope="col" class="text-center">Roe</th>
        </tr>
    </thead>
    <tbody>
        @if (Model != null)
        {
            foreach (var item in Model)
            {
                string priceClass = GetPriceColorClass(item.Price);
                string fairValueClass = GetFairValueColorClass(item.Price, item.FairValue);
                string dividendYieldClass = GetDividendYieldColorClass(item.DividendYield);
                string priceProfitClass = GetPriceProfitColorClass(item.PriceProfit);
                string priceOverAssetValueClass = GetPriceOverAssetValueColorClass(item.PriceOverAssetValue);
                string evEbitdaClass = GetEvEbitdaClass(item.EvEbitda);
                string dlEbitdaClass = GetDlEbitdaClass(item.DlEbitda);
                string compoundAnnualGrowthRateClass = GetCompoundAnnualGrowthRateClass(item.CompoundAnnualGrowthRate);
                string returnOnEquityClass = GetReturnOnEquityColorClass(item.ReturnOnEquity);
                string earningsPerShareClass = GetEarningsPerShareColorClass(item.EarningsPerShare);
                
                <tr>
                    <td class="text-center">
                        <button type="button" class="btn" data-toggle="tooltip" data-placement="top" title="Preço">
                            @item.Symbol
                            <img src="~/icon/copy.png" onclick="copyToClipboard('@item.Symbol')" style="height:14px;" />
                        </button>
                    </td>
                    <td class="text-center">
                        <button type="button" class="btn font-weight-bold @priceClass" data-toggle="tooltip" data-placement="top" title="Preço Atual">
                            R$@item.Price
                        </button>
                    </td>
                    <td class="text-center">
                        <button type="button" class="btn font-weight-bold @fairValueClass" data-toggle="tooltip" data-placement="top" title="Preço Justo = LPA X P/L">
                            R$@item.FairValue
                        </button>
                    </td>
                    <td class="text-center">
                        <button type="button" class="btn font-weight-bold @dividendYieldClass" data-toggle="tooltip" data-placement="top" title="Dividend Yield: Rendimento de dividendos">
                            @item.DividendYield %
                        </button>
                    </td>
                    <td class="text-center">
                        <button id="priceProfit" name="priceProfit" type="button" class="btn font-weight-bold @priceProfitClass" data-toggle="tooltip" data-placement="top" title="P/L Preço/Lucro: Calcula o preço de um ativo sobre o lucro">
                            @item.PriceProfit
                        </button>
                    </td>
                    <td class="text-center">
                        <button id="earningsPerShare" name="earningsPerShare" type="button" class="btn font-weight-bold @earningsPerShareClass" data-toggle="tooltip" data-placement="top" title="LPA: Ajudar a entender se uma empresa é lucrativa ou não">
                            @item.EarningsPerShare
                        </button>
                    </td>
                    <td class="text-center">
                        <button id="equityValuePerShare" name="equityValuePerShare" type="button" class="btn font-weight-bold @earningsPerShareClass" data-toggle="tooltip" data-placement="top" title="VPA: Indica a saúde financeira de um negócio">
                            @item.EquityValuePerShare
                        </button>
                    </td>
                    <td class="text-center">
                        <button id="priceOverAssetValue" name="priceOverAssetValue" type="button" class="btn font-weight-bold @priceOverAssetValueClass" data-toggle="tooltip" data-placement="top" title="P/VP Preço Valor Patrimonial: Compara o preço de mercado de uma ação com o valor patrimonial correspondente">
                            @item.PriceOverAssetValue
                        </button>
                    </td>
                    <td class="text-center">
                        <button id="evEbitda" name="evEbitda" type="button" class="btn font-weight-bold @evEbitdaClass" data-toggle="tooltip" data-placement="top" title="Ev/Ebitda: Valor da companhia (EV) e o seu Ebitda (geração de caixa).">
                            @item.EvEbitda
                        </button>
                    </td>
                    <td class="text-center">
                        <button id="dlEbitda" name="dlEbitda" type="button" class="btn font-weight-bold @dlEbitdaClass" data-toggle="tooltip" data-placement="top" title="Dl/Ebitda: Solvência de uma empresa e sua capacidade de pagar suas dívidas">
                            @item.DlEbitda
                        </button>
                    </td>
                    <td class="text-center">
                        <button id="compoundAnnualGrowthRate" name="compoundAnnualGrowthRate" type="button" class="btn font-weight-bold @compoundAnnualGrowthRateClass" data-toggle="tooltip" data-placement="top" title="Carg Lucro: Taxa de crescimento anual composto">
                            @item.CompoundAnnualGrowthRate %
                        </button>
                    </td>
                    <td class="text-center">
                        <button id="returnOnEquity" name="returnOnEquity" type="button" class="btn font-weight-bold @returnOnEquityClass" data-toggle="tooltip" data-placement="top" title="Roe">
                            @item.ReturnOnEquity %
                        </button>
                    </td>
                </tr>
            }
        }
        else
        {
            <h5>Falta banco de dados!</h5>
        }
    </tbody>
</table>
<h6>Total de ativos nesta página: @Model.Count()</h6>

@functions {
    

    private string GetEarningsPerShareColorClass(decimal value)
    {
        if (value < 0)
        {
            return "text-danger";
        }
        else if (value == 0)
        {
            return "text-warning";
        }
        else
        {
            return "text-success";
        }
    }

    private string GetPriceColorClass(decimal value)
    {
        if (value >= 20.50m)
        {
            return "text-danger";
        }
        else if (value >= 10.00m && value < 20.49m)
        {
            return "text-warning";
        }
        else
        {
            return "text-success";
        }
    }

    private string GetFairValueColorClass(decimal value, decimal fairValue)
    {
        if (fairValue > value)
        {
            return "text-success";
        }
        else if (value > fairValue)
        {
            return "text-danger";
        }
        else
        {
            return "text-warning";
        }
    }

    private string GetPriceOverAssetValueColorClass(decimal value)
    {
        if (value >= 1.50m)
        {
            return "text-danger";
        }
        else if (value >= 1.00m && value < 1.50m)
        {
            return "text-warning";
        }
        else
        {
            return "text-success";
        }
    }

    private string GetPriceProfitColorClass(decimal value)
    {
        if (value >= 5.00m)
        {
            return "text-danger";
        }
        else if (value <= 4.99m && value >= 2.00m)
        {
            return "text-warning";
        }
        else
        {
            return "text-success";
        }
    }

    private string GetReturnOnEquityColorClass(decimal value)
    {
        if (value <= 10.50m)
        {
            return "text-danger";
        }
        else if (value >= 10.51m && value <= 11.50m)
        {
            return "text-warning";
        }
        else
        {
            return "text-success";
        }
    }

    private string GetDividendYieldColorClass(decimal value)
    {
        if (value <= 10.50m)
        {
            return "text-danger";
        }
        else if (value >= 10.51m && value <= 11.50m)
        {
            return "text-warning";
        }
        else
        {
            return "text-success";
        }
    }

    private string GetEvEbitdaClass(decimal value)
    {
        if (value <= 9.50m)
        {
            return "text-success";
        }
        else if (value >= 9.51m && value <= 12.00m)
        {
            return "text-warning";
        }
        else
        {
            return "text-danger";
        }
    }

    private string GetDlEbitdaClass(decimal value)
    {
        if (value >= 2.50m)
        {
            return "text-danger";
        }
        else if (value <= 2.49m && value >= 0.00m)
        {
            return "text-warning";
        }
        else
        {
            return "text-success";
        }
    }

    private string GetCompoundAnnualGrowthRateClass(decimal value)
    {
        if (value <= 10.50m)
        {
            return "text-danger";
        }
        else if (value >= 10.51m && value <= 11.50m)
        {
            return "text-warning";
        }
        else
        {
            return "text-success";
        }
    }
}
